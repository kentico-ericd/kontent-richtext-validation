import { Token } from '../html-parser';
import { ContentComponentElement, RichTextContentModel } from '../content/';
export declare class Parser {
    private _headingTagNames;
    private _listTagNames;
    private _objectTagNames;
    private _elementTagNames;
    private _selfClosingTokenTypes;
    private _inlineStylesByTag;
    private _mutuallyExclusiveTags;
    private _input;
    private _inputLength;
    private _position;
    private _currentToken;
    private _previousToken;
    private _modelHelper;
    private _contentComponents;
    private _usedComponents;
    strict: boolean;
    constructor(strict: boolean);
    parse: (tokens: Token[], contentComponents?: ContentComponentElement[] | null) => RichTextContentModel;
    private validateDocumentForMutuallyExclusiveTags;
    private parseDocument;
    private parseBlocks;
    private nextToken;
    private acceptBlock;
    private isCurrent;
    private acceptHeadingBlock;
    private acceptParagraphBlock;
    private acceptOpeningTag;
    private acceptWhiteSpaces;
    private parseLine;
    private throw;
    private validateAllContentComponentsAreUsed;
    private isOpeningTagWhichHasMutuallyExclusiveTags;
    private isClosingTagWhichHasMutuallyExclusiveTags;
    private parseNestedContent;
    private acceptFigureBlock;
    private parseImage;
    private acceptObjectBlock;
    private acceptListingBlock;
    private parseListingItems;
    private parseListingItemContent;
    private acceptTableBlock;
    private parseTableRows;
    private parseTableCells;
    private acceptLink;
    private parseLinkContent;
    private parseAttributes;
    private acceptAttributeName;
    private acceptAttributeValue;
    private parseText;
    private acceptPlainText;
    private acceptStyledContent;
    private acceptLineBreak;
    private accept;
    private expectElementToken;
    private expectOneOfElementTokens;
    private humanizeElementTokens;
    private humanizeElementToken;
    private humanizeCurrentToken;
    private acceptOpeningTagStart;
    private expectClosingTag;
    private trim;
    private normalizeWhitespace;
}
